2015-09-02 10:08:43,811 [Thread-56:5416] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 222, in tag
    paginator = Paginator(article_list, 10)
UnboundLocalError: local variable 'article_list' referenced before assignment
2015-09-02 10:09:10,928 [Thread-57:6892] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 222, in tag
    paginator = Paginator(article_list, 10)
UnboundLocalError: local variable 'article_list' referenced before assignment
2015-09-02 10:10:11,213 [Thread-65:4384] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 222, in tag
    paginator = Paginator(article_list, 10)
UnboundLocalError: local variable 'article_list' referenced before assignment
2015-09-02 10:10:13,299 [Thread-66:6084] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 222, in tag
    paginator = Paginator(article_list, 10)
UnboundLocalError: local variable 'article_list' referenced before assignment
2015-09-02 10:11:37,507 [Thread-2:6876] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 222, in tag
    article_list = getPage(request, article_list)
UnboundLocalError: local variable 'article_list' referenced before assignment
2015-09-02 10:13:03,167 [Thread-45:4760] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 98, in render_to_string
    template = get_template(template_name, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 35, in get_template
    return engine.get_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 30, in get_template
    return Template(self.engine.get_template(template_name, dirs))
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 167, in get_template
    template, origin = self.find_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 141, in find_template
    source, display_name = loader(name, dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 13, in __call__
    return self.load_template(template_name, template_dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 23, in load_template
    template = Template(source, origin, template_name, self.engine)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 190, in __init__
    self.nodelist = engine.compile_string(template_string, origin)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 261, in compile_string
    return parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 210, in do_extends
    nodelist = parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 184, in do_block
    nodelist = parser.parse(('endblock',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 872, in do_for
    nodelist_loop = parser.parse(('empty', 'endfor',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 339, in parse
    self.invalid_block_tag(token, command, parse_until)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 394, in invalid_block_tag
    (command, get_text_list(["'%s'" % p for p in parse_until])))
TemplateSyntaxError: Invalid block tag: 'endblock', expected 'empty' or 'endfor'
2015-09-02 10:21:14,401 [Thread-98:2740] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 98, in render_to_string
    template = get_template(template_name, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 35, in get_template
    return engine.get_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 30, in get_template
    return Template(self.engine.get_template(template_name, dirs))
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 167, in get_template
    template, origin = self.find_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 141, in find_template
    source, display_name = loader(name, dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 13, in __call__
    return self.load_template(template_name, template_dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 23, in load_template
    template = Template(source, origin, template_name, self.engine)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 190, in __init__
    self.nodelist = engine.compile_string(template_string, origin)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 261, in compile_string
    return parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 210, in do_extends
    nodelist = parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 184, in do_block
    nodelist = parser.parse(('endblock',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 872, in do_for
    nodelist_loop = parser.parse(('empty', 'endfor',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 317, in parse
    filter_expression = self.compile_filter(token.contents)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 423, in compile_filter
    return FilterExpression(token, self)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 639, in __init__
    "from '%s'" % (token[upto:], token))
TemplateSyntaxError: Could not parse the remainder: '[id].name' from 'tag[id].name'
2015-09-02 10:21:48,072 [Thread-99:7040] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 98, in render_to_string
    template = get_template(template_name, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 35, in get_template
    return engine.get_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 30, in get_template
    return Template(self.engine.get_template(template_name, dirs))
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 167, in get_template
    template, origin = self.find_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 141, in find_template
    source, display_name = loader(name, dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 13, in __call__
    return self.load_template(template_name, template_dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 23, in load_template
    template = Template(source, origin, template_name, self.engine)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 190, in __init__
    self.nodelist = engine.compile_string(template_string, origin)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 261, in compile_string
    return parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 210, in do_extends
    nodelist = parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 184, in do_block
    nodelist = parser.parse(('endblock',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 872, in do_for
    nodelist_loop = parser.parse(('empty', 'endfor',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 315, in parse
    self.empty_variable(token)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 386, in empty_variable
    raise self.error(token, "Empty variable tag")
TemplateSyntaxError: Empty variable tag
2015-09-02 10:24:42,605 [Thread-2:7076] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 98, in render_to_string
    template = get_template(template_name, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 35, in get_template
    return engine.get_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 30, in get_template
    return Template(self.engine.get_template(template_name, dirs))
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 167, in get_template
    template, origin = self.find_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 141, in find_template
    source, display_name = loader(name, dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 13, in __call__
    return self.load_template(template_name, template_dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 23, in load_template
    template = Template(source, origin, template_name, self.engine)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 190, in __init__
    self.nodelist = engine.compile_string(template_string, origin)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 261, in compile_string
    return parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 210, in do_extends
    nodelist = parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 184, in do_block
    nodelist = parser.parse(('endblock',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 872, in do_for
    nodelist_loop = parser.parse(('empty', 'endfor',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 1014, in do_if
    nodelist = parser.parse(('elif', 'else', 'endif'))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 339, in parse
    self.invalid_block_tag(token, command, parse_until)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 394, in invalid_block_tag
    (command, get_text_list(["'%s'" % p for p in parse_until])))
TemplateSyntaxError: Invalid block tag: 'endfor', expected 'elif', 'else' or 'endif'
2015-09-02 10:27:07,436 [Thread-2:4892] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 216, in tag
    tag_list = Tag.objects.all()[id]
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 177, in __getitem__
    raise TypeError
TypeError
2015-09-02 10:27:54,440 [Thread-2:7076] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 65, in render
    result = block.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:28:41,693 [Thread-3:6944] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:29:21,049 [Thread-4:6088] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:29:23,107 [Thread-5:5436] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:29:23,378 [Thread-6:6224] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:29:23,665 [Thread-7:5392] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:29:32,585 [Thread-9:7152] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:29:52,349 [Thread-10:1048] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:30:33,104 [Thread-11:3768] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:42:31,339 [Thread-3:6104] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:43:44,130 [Thread-20:724] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:46:26,890 [Thread-21:5868] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 219, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:47:11,368 [Thread-2:4508] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 218, in tag
    return render(request,'tag.html',locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 161, in render
    values = list(values)
TypeError: 'Tag' object is not iterable
2015-09-02 10:53:18,934 [Thread-2:744] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    article_tag_list = Article.objects.get(pk=name)
  File "D:\Python27\lib\site-packages\django\db\models\manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 334, in get
    self.model._meta.object_name
DoesNotExist: Article matching query does not exist.
2015-09-02 10:55:17,167 [Thread-2:1660] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    article_tag_list = Article.objects.get(name=name)
  File "D:\Python27\lib\site-packages\django\db\models\manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 325, in get
    clone = self.filter(*args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 679, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 697, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1309, in add_q
    clause, require_inner = self._add_q(where_part, self.used_aliases)
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1337, in _add_q
    allow_joins=allow_joins, split_subq=split_subq,
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1149, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1035, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1396, in names_to_path
    "Choices are: %s" % (name, ", ".join(available)))
FieldError: Cannot resolve keyword 'name' into field. Choices are: category, category_id, click_count, comment, content, date_publish, desc, id, is_recommend, tag, title, user, user_id
2015-09-02 10:56:01,561 [Thread-2:3808] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    article_tag_list = Article.objects.get(pk=tag['name'])
TypeError: 'Tag' object has no attribute '__getitem__'
2015-09-02 10:56:11,473 [Thread-2:4864] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    article_tag_list = Article.objects.get(pk=tag[name])
TypeError: 'Tag' object has no attribute '__getitem__'
2015-09-02 10:56:41,078 [Thread-2:6396] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    article_tag_list = Article.objects.values('name')
  File "D:\Python27\lib\site-packages\django\db\models\manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 606, in values
    return self._clone(klass=ValuesQuerySet, setup=True, _fields=fields)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 960, in _clone
    c._setup_query()
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 1136, in _setup_query
    self.query.add_fields(self.field_names, True)
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1712, in add_fields
    "Choices are: %s" % (name, ", ".join(names)))
FieldError: Cannot resolve keyword 'name' into field. Choices are: category, category_id, click_count, comment, content, date_publish, desc, id, is_recommend, tag, title, user, user_id
2015-09-02 10:58:46,313 [Thread-2:1824] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    article_tag_list = Article.objects.filter(name=name)
  File "D:\Python27\lib\site-packages\django\db\models\manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 679, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 697, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1309, in add_q
    clause, require_inner = self._add_q(where_part, self.used_aliases)
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1337, in _add_q
    allow_joins=allow_joins, split_subq=split_subq,
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1149, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1035, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1396, in names_to_path
    "Choices are: %s" % (name, ", ".join(available)))
FieldError: Cannot resolve keyword 'name' into field. Choices are: category, category_id, click_count, comment, content, date_publish, desc, id, is_recommend, tag, title, user, user_id
2015-09-02 10:58:47,391 [Thread-3:5992] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /tag
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 217, in tag
    article_tag_list = Article.objects.filter(name=name)
  File "D:\Python27\lib\site-packages\django\db\models\manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 679, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\Python27\lib\site-packages\django\db\models\query.py", line 697, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1309, in add_q
    clause, require_inner = self._add_q(where_part, self.used_aliases)
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1337, in _add_q
    allow_joins=allow_joins, split_subq=split_subq,
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1149, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1035, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "D:\Python27\lib\site-packages\django\db\models\sql\query.py", line 1396, in names_to_path
    "Choices are: %s" % (name, ", ".join(available)))
FieldError: Cannot resolve keyword 'name' into field. Choices are: category, category_id, click_count, comment, content, date_publish, desc, id, is_recommend, tag, title, user, user_id
2015-09-02 11:29:46,052 [Thread-272:6620] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-02 11:29:46,065 [Thread-273:5996] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-02 12:00:11,289 [Thread-502:6076] [django.request:170] [base:get_response] [WARNING]- Not Found: /article/direct
2015-09-02 12:00:18,667 [Thread-503:6080] [django.request:170] [base:get_response] [WARNING]- Not Found: /article/about
2015-09-02 12:19:35,914 [Thread-537:3800] [django.request:170] [base:get_response] [WARNING]- Not Found: /article/direct
2015-09-02 14:37:22,032 [Thread-3:6492] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-02 14:37:22,039 [Thread-4:1196] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-02 16:31:01,966 [Thread-9:2164] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-02 16:31:01,973 [Thread-10:6724] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-02 16:35:05,434 [Thread-2:2892] [django.request:170] [base:get_response] [WARNING]- Not Found: /message
2015-09-02 16:59:04,085 [Thread-4:6000] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /about/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 9, in <module>
    url(r'^about/upload/(?P<dir_name>[^/]+)$', upload_image, name='upload_image'),
NameError: name 'upload_image' is not defined
2015-09-02 18:00:45,966 [Thread-2:7032] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 16, in <module>
    url(r'^reg', do_reg, name='reg'),
NameError: name 'do_reg' is not defined
2015-09-02 18:01:17,127 [Thread-4:5192] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 108, in article
    return render(request, 'article.html', locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 99, in render_to_string
    return template.render(context, request)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 74, in render
    return self.template.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 209, in render
    return self._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 135, in render
    return compiled_parent._render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 201, in _render
    return self.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 65, in render
    result = block.nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 329, in render
    return nodelist.render(context)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 903, in render
    bit = self.render_node(node, context)
  File "D:\Python27\lib\site-packages\django\template\debug.py", line 79, in render_node
    return node.render(context)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 507, in render
    six.reraise(*exc_info)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 493, in render
    url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 579, in reverse
    return force_text(iri_to_uri(resolver._reverse_with_prefix(view, prefix, *args, **kwargs)))
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 496, in _reverse_with_prefix
    (lookup_view_s, args, kwargs, len(patterns), patterns))
NoReverseMatch: Reverse for 'logout' with arguments '()' and keyword arguments '{}' not found. 0 pattern(s) tried: []
2015-09-02 18:02:19,221 [Thread-2:6884] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:02:49,190 [Thread-4:2964] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:03:19,331 [Thread-5:3200] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:03:56,382 [Thread-6:7140] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:03:59,124 [Thread-7:5092] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:03:59,395 [Thread-8:6988] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:03:59,615 [Thread-9:3932] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:04:57,342 [Thread-10:7004] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:38,005 [Thread-12:5616] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:38,869 [Thread-13:3972] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:39,473 [Thread-14:2152] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:39,786 [Thread-15:2964] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:43,934 [Thread-16:6940] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:44,269 [Thread-17:7092] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:44,540 [Thread-18:4352] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:44,960 [Thread-19:6776] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:45,165 [Thread-20:5364] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:45,371 [Thread-21:6044] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:45,674 [Thread-22:2164] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:05:45,892 [Thread-23:3780] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:06:05,233 [Thread-24:1660] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-02 18:08:13,354 [Thread-2:2956] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 223
    '''
def do_reg(request):
    try:
        if request.method == 'POST':
            reg_form = RegForm(request.POST)
            if reg_form.is_valid():
                # 娉ㄥ唽
                user = User.objects.create(username=reg_form.cleaned_data["username"],
                                    email=reg_form.cleaned_data["email"],
                                    url=reg_form.cleaned_data["url"],
                                    password=make_password(reg_form.cleaned_data["password"]),)
                user.save()

                # 鐧诲綍
                user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                login(request, user)
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': reg_form.errors})
        else:
            reg_form = RegForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'reg.html', locals())

# 鐧诲綍
def do_login(request):
    try:
        if request.method == 'POST':
            login_form = LoginForm(request.POST)
            if login_form.is_valid():
                # 鐧诲綍
                username = login_form.cleaned_data["username"]
                password = login_form.cleaned_data["password"]
                user = authenticate(username=username, password=password)
                if user is not None:
                    user.backend = 'django.contrib.auth.backends.ModelBackend' # 鎸囧畾榛樿鐨勭櫥褰曢獙璇佹柟寮?                    login(request, user)
                else:
                    return render(request, 'failure.html', {'reason': '鐧诲綍楠岃瘉澶辫触'})
                return redirect(request.POST.get('source_url'))
            else:
                return render(request, 'failure.html', {'reason': login_form.errors})
        else:
            login_form = LoginForm()
    except Exception as e:
        logger.error(e)
    return render(request, 'login.html', locals())

def category(request):
    try:
        # 鍏堣幏鍙栧鎴风鎻愪氦鐨勪俊鎭?        cid = request.GET.get('cid', None)
        try:
            category = Category.objects.get(pk=cid)
        except Category.DoesNotExist:
            return render(request, 'failure.html', {'reason': '鍒嗙被涓嶅瓨鍦?})
        article_list = Article.objects.filter(category=category)
        article_list = getPage(request, article_list)
    except Exception as e:
        logger.error(e)
    return render(request, 'category.html', locals())

#鍏充簬鍜岀暀瑷€
def about(request):
    return render(request,'about.html',locals())

#鍗氬鐩綍
def direct(request):
    article_list = Article.objects.all()
    article_list = getPage(request, article_list)
    return render(request,'direct.html',locals())

#鏍囩浜?def tag(request):
    tid = request.GET.get('id',None)
    tag = Tag.objects.get(pk=tid)
    article_tag_list = Article.objects.filter(tag=tag)
    article_tag_list = getPage(request, article_tag_list)
    return render(request,'tag.html',locals())
       
                    
        
                                    
                                            
                                   
                        
                                                                                      
                                                                         
                                                                     
                                                                                               
                           

                        
                                                                                                              
                                    
                                                               
                 
                                                                                   
             
                                
                          
                       
                                                

        
                      
        
                                    
                                                
                                     
                        
                                                              
                                                              
                                                                         
                                    
                                                                                                                  
                                        
                     
                                                                                            
                                                               
                 
                                                                                     
             
                                    
                          
                       
                                                  

                      
        
                                           
                                          
            
                                                   
                                     
                                                                                 
                                                                
                                                     
                          
                       
                                                     

                
                   
                                                

             
                    
                                        
                                                 
                                                 

          
                 
                                    
                                 
                                                      
                                                         
                                             ^
SyntaxError: EOF while scanning triple-quoted string literal
2015-09-06 15:19:30,082 [Thread-28:6416] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-06 15:19:30,098 [Thread-29:7960] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-07 09:09:03,584 [Thread-28:4944] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-07 09:09:03,595 [Thread-29:4424] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-07 15:16:55,612 [Thread-3:4940] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-07 15:16:55,641 [Thread-5:5540] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-08 17:33:40,970 [Thread-20:7888] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-08 17:33:41,020 [Thread-21:4060] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-10 10:27:29,815 [Thread-21:6864] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-10 10:27:29,835 [Thread-22:2944] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-14 08:31:43,628 [Thread-21:624] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-14 08:31:43,642 [Thread-22:6892] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-14 08:59:40,806 [Thread-2:1068] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 114
    url=comment_form.cleaned_data["url"] if url.find("http://")=-1 url+="http://",
                                                               ^
SyntaxError: invalid syntax
2015-09-14 09:01:08,789 [Thread-8:1108] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 119
    if url.find("http://")=-1:
                          ^
SyntaxError: invalid syntax
2015-09-14 09:01:10,349 [Thread-9:2252] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 119
    if url.find("http://")=-1:
                          ^
SyntaxError: invalid syntax
2015-09-14 09:01:10,565 [Thread-10:2240] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 119
    if url.find("http://")=-1:
                          ^
SyntaxError: invalid syntax
2015-09-14 09:01:37,688 [Thread-2:6676] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 119
    if url.find("http://")=-1:
                          ^
SyntaxError: invalid syntax
2015-09-14 09:02:38,243 [Thread-2:6524] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 114
    url=comment_form.cleaned_data["url"] if url.find("http://")==-1:url+="http://",
                                                                   ^
SyntaxError: invalid syntax
2015-09-14 09:03:17,430 [Thread-3:6404] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 114
    url=comment_form.cleaned_data["url"] if url.find("http://")>=0 else url+="http://",
                                                                            ^
SyntaxError: invalid syntax
2015-09-14 09:03:18,246 [Thread-4:5656] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 114
    url=comment_form.cleaned_data["url"] if url.find("http://")>=0 else url+="http://",
                                                                            ^
SyntaxError: invalid syntax
2015-09-14 09:03:18,650 [Thread-5:4136] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 114
    url=comment_form.cleaned_data["url"] if url.find("http://")>=0 else url+="http://",
                                                                            ^
SyntaxError: invalid syntax
2015-09-14 09:03:18,845 [Thread-6:4544] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 114
    url=comment_form.cleaned_data["url"] if url.find("http://")>=0 else url+="http://",
                                                                            ^
SyntaxError: invalid syntax
2015-09-14 09:03:19,036 [Thread-7:1316] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 119, in get_response
    resolver_match = resolver.resolve(request.path_info)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 366, in resolve
    for pattern in self.url_patterns:
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 402, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "D:\Python27\lib\site-packages\django\core\urlresolvers.py", line 396, in urlconf_module
    self._urlconf_module = import_module(self.urlconf_name)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\python_blog\urls.py", line 27, in <module>
    url(r'^', include('blog.urls')),
  File "D:\Python27\lib\site-packages\django\conf\urls\__init__.py", line 33, in include
    urlconf_module = import_module(urlconf_module)
  File "D:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "E:\python_blog\python_blog\blog\urls.py", line 3, in <module>
    from blog.views import *
  File "E:\python_blog\python_blog\blog\views.py", line 114
    url=comment_form.cleaned_data["url"] if url.find("http://")>=0 else url+="http://",
                                                                            ^
SyntaxError: invalid syntax
2015-09-14 09:05:55,812 [Thread-2:6764] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 103, in article
    return render(request, 'article.html', locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 98, in render_to_string
    template = get_template(template_name, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 35, in get_template
    return engine.get_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 30, in get_template
    return Template(self.engine.get_template(template_name, dirs))
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 167, in get_template
    template, origin = self.find_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 141, in find_template
    source, display_name = loader(name, dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 13, in __call__
    return self.load_template(template_name, template_dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 23, in load_template
    template = Template(source, origin, template_name, self.engine)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 190, in __init__
    self.nodelist = engine.compile_string(template_string, origin)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 261, in compile_string
    return parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 210, in do_extends
    nodelist = parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 184, in do_block
    nodelist = parser.parse(('endblock',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 1013, in do_if
    condition = TemplateIfParser(parser, bits).parse()
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 945, in __init__
    super(TemplateIfParser, self).__init__(*args, **kwargs)
  File "D:\Python27\lib\site-packages\django\template\smartif.py", line 168, in __init__
    mapped_tokens.append(self.translate_token(token))
  File "D:\Python27\lib\site-packages\django\template\smartif.py", line 179, in translate_token
    return self.create_var(token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 948, in create_var
    return TemplateLiteral(self.template_parser.compile_filter(value), value)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 423, in compile_filter
    return FilterExpression(token, self)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 639, in __init__
    "from '%s'" % (token[upto:], token))
TemplateSyntaxError: Could not parse the remainder: '("http://")==-1' from 'comment_form.url.find("http://")==-1'
2015-09-14 09:06:16,088 [Thread-3:6716] [django.request:256] [base:handle_uncaught_exception] [ERROR]- Internal Server Error: /article/
Traceback (most recent call last):
  File "D:\Python27\lib\site-packages\django\core\handlers\base.py", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "E:\python_blog\python_blog\blog\views.py", line 103, in article
    return render(request, 'article.html', locals())
  File "D:\Python27\lib\site-packages\django\shortcuts.py", line 67, in render
    template_name, context, request=request, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 98, in render_to_string
    template = get_template(template_name, using=using)
  File "D:\Python27\lib\site-packages\django\template\loader.py", line 35, in get_template
    return engine.get_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\backends\django.py", line 30, in get_template
    return Template(self.engine.get_template(template_name, dirs))
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 167, in get_template
    template, origin = self.find_template(template_name, dirs)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 141, in find_template
    source, display_name = loader(name, dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 13, in __call__
    return self.load_template(template_name, template_dirs)
  File "D:\Python27\lib\site-packages\django\template\loaders\base.py", line 23, in load_template
    template = Template(source, origin, template_name, self.engine)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 190, in __init__
    self.nodelist = engine.compile_string(template_string, origin)
  File "D:\Python27\lib\site-packages\django\template\engine.py", line 261, in compile_string
    return parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 210, in do_extends
    nodelist = parser.parse()
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\loader_tags.py", line 184, in do_block
    nodelist = parser.parse(('endblock',))
  File "D:\Python27\lib\site-packages\django\template\base.py", line 341, in parse
    compiled_result = compile_func(self, token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 1013, in do_if
    condition = TemplateIfParser(parser, bits).parse()
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 945, in __init__
    super(TemplateIfParser, self).__init__(*args, **kwargs)
  File "D:\Python27\lib\site-packages\django\template\smartif.py", line 168, in __init__
    mapped_tokens.append(self.translate_token(token))
  File "D:\Python27\lib\site-packages\django\template\smartif.py", line 179, in translate_token
    return self.create_var(token)
  File "D:\Python27\lib\site-packages\django\template\defaulttags.py", line 948, in create_var
    return TemplateLiteral(self.template_parser.compile_filter(value), value)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 423, in compile_filter
    return FilterExpression(token, self)
  File "D:\Python27\lib\site-packages\django\template\base.py", line 639, in __init__
    "from '%s'" % (token[upto:], token))
TemplateSyntaxError: Could not parse the remainder: '("http://")==-1' from 'comment_form.url.find("http://")==-1'
2015-09-14 15:14:56,611 [Thread-4:7744] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
2015-09-14 15:14:56,635 [Thread-5:7236] [django.request:170] [base:get_response] [WARNING]- Not Found: /favicon.ico
